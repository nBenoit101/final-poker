/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.finalpoker;

import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;


/**
 *
 * @author nickbenoit
 */
public class SinglePlayerWin extends javax.swing.JFrame{
    private ArrayList<JLabel> playerCardsImg;
    private ArrayList<JLabel> dealerCardsImg;
    private ArrayList<JLabel> tableCardsImg;
    private ArrayList<Observer> observers;
    
    
    private static SinglePlayerWin window;
    
    /**
     * Creates new form SingePlayerWin
     */
    private SinglePlayerWin() {
        initComponents();
        dealerCardsImg = new ArrayList();
        playerCardsImg = new ArrayList();
        tableCardsImg = new ArrayList();
        observers = new ArrayList();
        initializeGui();
        disableGui();
        cardState(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        callBtn = new javax.swing.JButton();
        checkBtn = new javax.swing.JButton();
        raiseSlider = new javax.swing.JSlider();
        raiseBtn = new javax.swing.JButton();
        raiseAmount = new javax.swing.JLabel();
        turnCard = new javax.swing.JLabel();
        flopCard3 = new javax.swing.JLabel();
        playerCard2 = new javax.swing.JLabel();
        playerCard1 = new javax.swing.JLabel();
        flopCard2 = new javax.swing.JLabel();
        flopCard1 = new javax.swing.JLabel();
        riverCard = new javax.swing.JLabel();
        dealerCard1 = new javax.swing.JLabel();
        dealerCard2 = new javax.swing.JLabel();
        balanceText = new javax.swing.JTextField();
        dealerInfo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        foldBtn = new javax.swing.JButton();
        quitBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        callBtn.setText("Call");
        callBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callBtnActionPerformed(evt);
            }
        });

        checkBtn.setText("Check");
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });

        raiseSlider.setMinimum(1);
        raiseSlider.setToolTipText("");
        raiseSlider.setValue(1);
        raiseSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                raiseSliderStateChanged(evt);
            }
        });

        raiseBtn.setText("Raise");
        raiseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiseBtnActionPerformed(evt);
            }
        });

        raiseAmount.setText("$");

        turnCard.setText("jLabel1");

        flopCard3.setText("jLabel1");

        playerCard2.setText("jLabel1");

        playerCard1.setText("jLabel1");

        flopCard2.setText("jLabel1");

        flopCard1.setText("jLabel1");

        riverCard.setText("jLabel1");

        dealerCard1.setText("jLabel1");

        dealerCard2.setText("jLabel1");

        balanceText.setEditable(false);
        balanceText.setText("Balance: ");
        balanceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceTextActionPerformed(evt);
            }
        });

        dealerInfo.setEditable(false);

        jLabel1.setText("Dealer:");

        foldBtn.setText("Fold");
        foldBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foldBtnActionPerformed(evt);
            }
        });

        quitBtn.setText("Quit");
        quitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(balanceText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(165, 165, 165)
                        .addComponent(dealerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dealerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(flopCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(flopCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(flopCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(turnCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(riverCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dealerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(foldBtn)
                        .addGap(18, 18, 18)
                        .addComponent(callBtn)
                        .addGap(18, 18, 18)
                        .addComponent(checkBtn)
                        .addGap(224, 224, 224)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(quitBtn)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGap(294, 294, 294)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(raiseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(raiseAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(raiseBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dealerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dealerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quitBtn)
                            .addComponent(balanceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dealerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flopCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flopCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flopCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(turnCard, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(riverCard, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(callBtn)
                    .addComponent(checkBtn)
                    .addComponent(raiseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(raiseAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(raiseBtn)
                    .addComponent(foldBtn))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void callBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callBtnActionPerformed
        // TODO add your handling code here:
        Player.getPlayer().changeHasPlayerGone(true);
        Player.getPlayer().playerActions("call");
        disableGui();
    }//GEN-LAST:event_callBtnActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        // TODO add your handling code here:
        
        Player.getPlayer().changeHasPlayerGone(true);
        Player.getPlayer().playerActions("check");
        System.out.println("[Window]Check");
        disableGui();
    }//GEN-LAST:event_checkBtnActionPerformed

    private void raiseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiseBtnActionPerformed
        // TODO add your handling code here:
        if(Player.getPlayer().changeBalance(-raiseSlider.getValue())){
            Player.getPlayer().changeHasPlayerGone(true);
            int raiseAmount = raiseSlider.getValue();
            Player.getPlayer().playerActions("raise:" + raiseAmount);
            updateBalanceText();
            notifyObservers();
        }else{
            showPopup("All In");
            Player.getPlayer().playerActions("raise:" + Player.getPlayer().getBalance());
            updateBalanceText();
            notifyObservers();
        }
        disableGui();
    }//GEN-LAST:event_raiseBtnActionPerformed

    private void balanceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_balanceTextActionPerformed

    private void raiseSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_raiseSliderStateChanged
        // TODO add your handling code here:
        raiseAmount.setText("$ " + raiseSlider.getValue());
    }//GEN-LAST:event_raiseSliderStateChanged

    private void foldBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foldBtnActionPerformed
        // TODO add your handling code here:
        Player.getPlayer().changeHasPlayerGone(true);
        Player.getPlayer().playerActions("fold");
        disableGui();
    }//GEN-LAST:event_foldBtnActionPerformed

    private void quitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBtnActionPerformed
        // TODO add your handling code here:
        Player.getPlayer().endConnection();
        this.setVisible(false);
        disableGui();
        cardState(false);
       
    }//GEN-LAST:event_quitBtnActionPerformed

    
    //PUBLIC METHODS
    public static SinglePlayerWin getWindow(){
        if(window==null){
            window = new SinglePlayerWin();
        }
        return window;
    }   
    
    public void addObserver(Observer o){
        observers.add(o);
    }
    
    
    public void quitBtnState(boolean b){
        quitBtn.setVisible(b);
    }
    
    
    //Changes the TextField based on what's happening in the game
    public void changeDealersChoice(String t){
        if(t.equals("playersTurn")){
            dealerInfo.setText(t);
        }else{
            dealerInfo.setText("Dealer chooses to "+t);
        }
        
    }
    
   
    public void updateBalanceText(){
        balanceText.setText("Balance: " + Player.getPlayer().getBalance());
        notifyObservers();
    }
    
    
    //Shows the dealers Cards
    //Dealers Cards are just visualized as the back of a card
    public void showInitialCards(){
        for(int i = 0; i<playerCardsImg.size(); i++){
            try{
                ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (Player.getPlayer().getPlayerCards().get(i)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 playerCardsImg.get(i).setIcon(new ImageIcon(newimg));
                 playerCardsImg.get(i).setVisible(true);
            }catch(java.net.MalformedURLException e){

            }
        }
        for(int i = 0; i<dealerCardsImg.size(); i++){
            try{
                ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + ("back") + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 dealerCardsImg.get(i).setIcon(new ImageIcon(newimg));
                 dealerCardsImg.get(i).setVisible(true);
            }catch(java.net.MalformedURLException e){

            }
        }        
    }
    
    
    //Shows the flop cards (First 3 table Cards)
    public void showFlopCards(){
       for(int i = 0; i<3; i++){
            try{
                ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (Player.getPlayer().getTableCards().get(i)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 tableCardsImg.get(i).setIcon(new ImageIcon(newimg));
                 tableCardsImg.get(i).setVisible(true);
            }catch(java.net.MalformedURLException e){

            }
        }
    }
    
    //Shows the turn Card (The last 4thxw card)
    public void showTurnCard(){
        try{
            ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (Player.getPlayer().getTableCards().get(3)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 tableCardsImg.get(3).setIcon(new ImageIcon(newimg));
                 tableCardsImg.get(3).setVisible(true);
        }catch(java.net.MalformedURLException e){

        }
    }
    
    //Shows the river Card (The last table card)
    public void showRiverCard(){
        try{
            ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (Player.getPlayer().getTableCards().get(4)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 tableCardsImg.get(4).setIcon(new ImageIcon(newimg));
                 tableCardsImg.get(4).setVisible(true);
        }catch(java.net.MalformedURLException e){

        }
    }
    
    public void showPopup(String message) {
        javax.swing.JOptionPane.showMessageDialog(this, message, "Round Result", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    //Enables Certian Gui Elements depending on the string it recieves
    public void handleGui(String message){
        if (message.equals("check")){
            checkBtn.setEnabled(true);
            raiseSlider.setEnabled(true);
            raiseAmount.setEnabled(true);
            raiseBtn.setEnabled(true);
            foldBtn.setEnabled(true);
            foldBtn.setEnabled(true);
        }
        if(message.equals("raise")){
            callBtn.setEnabled(true);
            raiseBtn.setEnabled(true);
            raiseSlider.setEnabled(true);
            raiseAmount.setEnabled(true);
        }
    }
    
    //Disables all GUI Buttons
    public void disableGui(){
        checkBtn.setEnabled(false);
        raiseSlider.setEnabled(false);
        raiseAmount.setEnabled(false);
        raiseBtn.setEnabled(false);
        callBtn.setEnabled(false);
        foldBtn.setEnabled(false);
    }
    
    //Sets the Cards visibility to either true or false
    public void cardState(boolean b){
        for(int i=0; i<2; i++){
            playerCardsImg.get(i).setVisible(b);
            dealerCardsImg.get(i).setVisible(b);
        }
        for(int i = 0; i<tableCardsImg.size(); i++){
            tableCardsImg.get(i).setVisible(b);
        }
    }
    
    //PRIVATE METHODS

    //Tells Observers(HomeScreen to update players balance)
    private void notifyObservers(){
        for(int i=0; i<observers.size(); i++){
            observers.get(i).updateData();
        }
    }

    
   //Adds the Card Labels to a list so they can be refernenced later
    //Shows players balance
    private void initializeGui(){
        playerCardsImg.add(playerCard1);
        playerCardsImg.add(playerCard2);
        dealerCardsImg.add(dealerCard1);
        dealerCardsImg.add(dealerCard2);
        tableCardsImg.add(flopCard1);
        tableCardsImg.add(flopCard2);
        tableCardsImg.add(flopCard3);
        tableCardsImg.add(turnCard);
        tableCardsImg.add(riverCard);
        updateBalanceText();
        raiseAmount.setText("$ " + raiseSlider.getValue());
    }
    

    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField balanceText;
    private javax.swing.JButton callBtn;
    private javax.swing.JButton checkBtn;
    private javax.swing.JLabel dealerCard1;
    private javax.swing.JLabel dealerCard2;
    private javax.swing.JTextField dealerInfo;
    private javax.swing.JLabel flopCard1;
    private javax.swing.JLabel flopCard2;
    private javax.swing.JLabel flopCard3;
    private javax.swing.JButton foldBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel playerCard1;
    private javax.swing.JLabel playerCard2;
    private javax.swing.JButton quitBtn;
    private javax.swing.JLabel raiseAmount;
    private javax.swing.JButton raiseBtn;
    private javax.swing.JSlider raiseSlider;
    private javax.swing.JLabel riverCard;
    private javax.swing.JLabel turnCard;
    // End of variables declaration//GEN-END:variables
}
