/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.finalpoker;

import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;


/**
 *
 * @author nickbenoit
 */
public class SinglePlayerWin extends javax.swing.JFrame implements Observer {
    private ArrayList<JLabel> playerCardsImg;
    private ArrayList<JLabel> dealerCardsImg;
    private ArrayList<JLabel> tableCardsImg;
    
    private SinglePlayerServer server;
    private static SinglePlayerWin window;
    
    /**
     * Creates new form SingePlayerWin
     */
    private SinglePlayerWin() {
        initComponents();
        server = SinglePlayerServer.server();
        dealerCardsImg = new ArrayList();
        playerCardsImg = new ArrayList();
        tableCardsImg = new ArrayList();
        initializeGui();
        cardState(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        callBtn = new javax.swing.JButton();
        checkBtn = new javax.swing.JButton();
        raiseSlider = new javax.swing.JSlider();
        raiseButton = new javax.swing.JButton();
        raiseAmount = new javax.swing.JLabel();
        turnCard = new javax.swing.JLabel();
        flopCard3 = new javax.swing.JLabel();
        playerCard2 = new javax.swing.JLabel();
        playerCard1 = new javax.swing.JLabel();
        flopCard2 = new javax.swing.JLabel();
        flopCard1 = new javax.swing.JLabel();
        riverCard = new javax.swing.JLabel();
        dealerCard1 = new javax.swing.JLabel();
        dealerCard2 = new javax.swing.JLabel();
        balanceText = new javax.swing.JTextField();
        dealerInfo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        callBtn.setText("Call");
        callBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callBtnActionPerformed(evt);
            }
        });

        checkBtn.setText("Check");
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });

        raiseSlider.setMinimum(1);
        raiseSlider.setToolTipText("");
        raiseSlider.setValue(1);
        raiseSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                raiseSliderStateChanged(evt);
            }
        });

        raiseButton.setText("Raise");
        raiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiseButtonActionPerformed(evt);
            }
        });

        raiseAmount.setText("$");

        turnCard.setText("jLabel1");

        flopCard3.setText("jLabel1");

        playerCard2.setText("jLabel1");

        playerCard1.setText("jLabel1");

        flopCard2.setText("jLabel1");

        flopCard1.setText("jLabel1");

        riverCard.setText("jLabel1");

        dealerCard1.setText("jLabel1");

        dealerCard2.setText("jLabel1");

        balanceText.setEditable(false);
        balanceText.setText("Balance: ");
        balanceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceTextActionPerformed(evt);
            }
        });

        dealerInfo.setEditable(false);

        jLabel1.setText("Dealer:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(balanceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215)
                        .addComponent(dealerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dealerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(flopCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(flopCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(flopCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(turnCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(riverCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dealerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 368, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(callBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBtn)
                        .addGap(49, 49, 49)
                        .addComponent(raiseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(raiseAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(raiseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(playerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(balanceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dealerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dealerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dealerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flopCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flopCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flopCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(turnCard, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(riverCard, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(callBtn)
                            .addComponent(checkBtn)
                            .addComponent(raiseSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(raiseAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(raiseButton)
                        .addGap(14, 14, 14))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void callBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_callBtnActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBtnActionPerformed

    private void raiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_raiseButtonActionPerformed

    private void balanceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_balanceTextActionPerformed

    private void raiseSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_raiseSliderStateChanged
        // TODO add your handling code here:
        raiseAmount.setText("$ " + raiseSlider.getValue());
    }//GEN-LAST:event_raiseSliderStateChanged

    public static SinglePlayerWin getWindow(){
        if(window==null){
            window = new SinglePlayerWin();
        }
        return window;
    }   
    
    
    @Override
    public void updateData(){
        if(server.getCurrentState().getValue() == 0){
            showInitialCards();
        }else if(server.getCurrentState().getValue() == 1){
            showFlopCards();
        }else if(server.getCurrentState().getValue() == 2){
            showTurnCard();
        }else{
            showRiverCard();
        }
    }
    
    private void initializeGui(){
        playerCardsImg.add(playerCard1);
        playerCardsImg.add(playerCard2);
        dealerCardsImg.add(dealerCard1);
        dealerCardsImg.add(dealerCard2);
        tableCardsImg.add(flopCard1);
        tableCardsImg.add(flopCard2);
        tableCardsImg.add(flopCard3);
        tableCardsImg.add(turnCard);
        tableCardsImg.add(riverCard);
        updateBalanceText();
        raiseAmount.setText("$ " + raiseSlider.getValue());
    }
    
    private void updateBalanceText(){
        balanceText.setText("Balance: " + Player.getPlayer().getBalance());
    }
    
    private void showInitialCards(){
        for(int i = 0; i<playerCardsImg.size(); i++){
            try{
                ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (server.getPlayerCards().get(i)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 playerCardsImg.get(i).setIcon(new ImageIcon(newimg));
                 playerCardsImg.get(i).setVisible(true);
            }catch(java.net.MalformedURLException e){

            }
        }
        for(int i = 0; i<dealerCardsImg.size(); i++){
            try{
                ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + ("back") + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 dealerCardsImg.get(i).setIcon(new ImageIcon(newimg));
                 dealerCardsImg.get(i).setVisible(true);
            }catch(java.net.MalformedURLException e){

            }
        }        
    }
    
    private void showFlopCards(){
       for(int i = 0; i<3; i++){
            try{
                ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (server.getTableCards().get(i)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 tableCardsImg.get(i).setIcon(new ImageIcon(newimg));
                 tableCardsImg.get(i).setVisible(true);
            }catch(java.net.MalformedURLException e){

            }
        }
    }
        
    private void showTurnCard(){
        try{
            ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (server.getTableCards().get(3)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 tableCardsImg.get(3).setIcon(new ImageIcon(newimg));
                 tableCardsImg.get(3).setVisible(true);
        }catch(java.net.MalformedURLException e){

        }
    }
    
    private void showRiverCard(){
        try{
            ImageIcon tmp = new javax.swing.ImageIcon(
                new java.net.URL("https://deckofcardsapi.com/static/img/" + (server.getTableCards().get(2)) + ".png"));
                 // resizing from https://stackoverflow.com/a/18335435	
                 Image image = tmp.getImage(); // transform it 
                 Image newimg = image.getScaledInstance(50, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                 // end resizing from https://stackoverflow.com/a/18335435

                 tableCardsImg.get(2).setIcon(new ImageIcon(newimg));
                 tableCardsImg.get(2).setVisible(true);
        }catch(java.net.MalformedURLException e){

        }
    }
    
    private void cardState(boolean b){
        for(int i=0; i<2; i++){
            playerCardsImg.get(i).setVisible(b);
            dealerCardsImg.get(i).setVisible(b);
        }
        for(int i = 0; i<tableCardsImg.size(); i++){
            tableCardsImg.get(i).setVisible(b);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField balanceText;
    private javax.swing.JButton callBtn;
    private javax.swing.JButton checkBtn;
    private javax.swing.JLabel dealerCard1;
    private javax.swing.JLabel dealerCard2;
    private javax.swing.JTextField dealerInfo;
    private javax.swing.JLabel flopCard1;
    private javax.swing.JLabel flopCard2;
    private javax.swing.JLabel flopCard3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel playerCard1;
    private javax.swing.JLabel playerCard2;
    private javax.swing.JLabel raiseAmount;
    private javax.swing.JButton raiseButton;
    private javax.swing.JSlider raiseSlider;
    private javax.swing.JLabel riverCard;
    private javax.swing.JLabel turnCard;
    // End of variables declaration//GEN-END:variables
}
